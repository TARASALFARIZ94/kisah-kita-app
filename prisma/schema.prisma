// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  role     Role     @default(USER)

  trips    Trip[]
}

model Trip {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  title        String
  destination  String
  startDate    DateTime
  endDate      DateTime
  
  rundowns     Rundown[]
  photos       Photo[]
}

model Rundown {
  id           Int      @id @default(autoincrement())
  trip         Trip     @relation(fields: [tripId], references: [id])
  tripId       Int
  activityTime DateTime
  activity     String
}

model Photo {
  id         Int      @id @default(autoincrement())
  trip       Trip     @relation(fields: [tripId], references: [id])
  tripId     Int
  gdriveLink String
  reported   Boolean  @default(false)
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String   @db.Text // Gunakan @db.Text jika pertanyaan bisa panjang
  answer    String   @db.Text // Gunakan @db.Text jika jawaban bisa panjang
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// Model untuk Bill (Dokumen Split Bill Keseluruhan)
model Bill {
  id            String   @id @default(uuid())
  name          String
  
  participants  Json     // Akan menyimpan JSON string dari array of strings, e.g., '["Dinnar", "Nasywa", "Farhan"]'
  // --- Akhir Perbaikan ---
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  expenses Expense[] // Item-item pengeluaran dalam bill ini
}

// Model untuk Item Pengeluaran
model Expense {
  id              String   @id @default(uuid())
  billId          String
  bill            Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  description     String
  quantity        Int      @default(1)
  totalAmount     Int      // Simpan dalam cents/pennies (misal Rp19.200 jadi 19200)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  paidBy          String   // Nama orang yang membayar, misal "Dinnar"

  splitAmong      Json     // Akan menyimpan JSON string dari array of strings
  // --- Akhir Perbaikan ---
}

enum Role {
  USER
  ADMIN
}